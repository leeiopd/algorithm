'''
1에서 N 까지의 수가 적힌 동전 N 개가 모두 뒷면을 보이며 일렬로 나열되어 있다.

동전의 앞면, 뒷면에 모두 같은 수가 적혀 있으며, 앞면과 뒷면은 서로 구별이 가능하다.

또한, 서로 다른 동전에 같은 수가 적혀 있는 경우는없다.

은비는 일렬로 나열된 동전 중 가장 왼쪽 동전에서 시작하여 오른쪽으로 가면서 동전을 하나씩 본다.

은비가 현재 보고 있는 동전에 적힌 수를 x라고 할 때,

현재 보고있는 동전보다 오른쪽에 있는 모든 동전에 대해 그 동전에 적힌 수가 x보다 큰 경우 그 큰 동전을 뒤집는다.

N개 동전의 배치는 총 N!가지가 있다.

각각의 배치에 대해 은비는 위에 언급된 동작을 모두 해 보고 최종적으로 앞면을 보이는 동전의 개수를 구하고 싶다.

이 개수를 구하기 위한 프로그램을 작성하라.


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 하나의 정수 N(1≤N≤103)이 주어진다.


[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,

각 테스트 케이스마다 앞면을 보이는 동전의 총 개수를 출력한다.

이 수가 매우 클 수 있으므로, 1,000,000,007로 나눈 나머지를 출력하도록 한다.
'''
import sys
sys.stdin = open('8501.txt')

T = int(input())


def Dfs(x=0):
    global result
    if x == N:
        for i in range(N-1, 0, -1):
            cnt = 0
            for j in range(i, -1, -1):
                if tmp[i] > tmp[j]:
                    cnt += 1
            if cnt % 2:
                result += 1
        return

    for i in range(N):
        if i not in tmp:
            tmp[x] = i
            Dfs(x+1)
            tmp[x] = -1


for case in range(1, T+1):
    N = int(input())
    tmp = [-1] * N
    result = 0
    Dfs()
    print(result)
