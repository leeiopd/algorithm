'''
N 명의 신입 사원들을 대상으로 입사 당시 어학점수(ni , 1 ≤ i ≤ N)에 따라 3개의 분반 (A반, B반, C반) 으로 나누어 과정을 진행할 예정이다.
N 명의 신입 사원들을 3개의 반으로 나누는 과정은 아래와 같다.

1. 분반 기준이 되는 2개의 어학점수 T1, T2 (T1 < T2)를 정한다.
2. 어학점수가 T2 이상인 신입 사원은 A반으로 배정한다.
3. 어학점수가 T1 이상, T2 미만인 신입 사원은 B반으로 배정한다.
4. 어학점수가 T1 미만인 신입 사원은 C반으로 배정한다.
예를 들어 T1 = 10, T2 = 20 으로 정했을 때, 20점 이상의 어학 점수를 가진 신입 사원들은 모두 A반,	10점 ~ 19점의 점수를 가진 신입 사원들은 B반으로, 1점 ~ 9점은 C반으로 배정된다.
이때, 각 반의 인원수가 너무 적거나 너무 많을 경우 교육과정 준비에 효율적이지 않기 때문에 각 반의 인원은 최소 인원과 최대 인원 사이에 존재해야 한다. (최소 인원과 최대 인원은 입력으로 주어진다.)
그리고 N 명의 신입 사원은 반드시 A반, B반, C반 중 하나의 분반에 배정이 되어야만 한다.
입력으로 신입 사원들의 총 인원 수(N)와 각 사원들의 어학점수(ni , 1 ≤ i ≤ N), 그리고 하나의 분반에 들어갈 수 있는 최소 인원 수(K Min)와 최대 인원 수(K Max)가 주어진다.
주어진 입력에서 정원 수를 만족시키는 반편성이 가능할 때, 가장 많은 인원으로 구성된 분반과 가장 적은 인원으로 구성된 분반의 인원 수 차이값이 최소가 되는 경우를 찾아 그 값을 출력하는 프로그램을 작성하라.
만약 조건을 만족하는 반 배정이 불가능 할 경우, -1 을 출력하라.

[제약조건]
1. 신입 사원의 수 N 의 범위는 5 이상, 1,000 이하의 정수이다. (5 ≤ N ≤ 1,000)
2. 어학 점수의 범위는 1 이상, 100 이하의 정수이다. (1 ≤ ni ≤ 100)
3. N 명의 신입 사원은 반드시 A반, B반, C반 중 하나의 분반에 배정이 되어야만 한다.
4. 한 반의 인원은 최소인원 이상 최대인원 이하여야 한다.
5. 신입 사원의 수 N은 최소 인원(K Min)의 3배 이상으로 주어진다.
6. 신입 사원의 수 N은 최대 인원(K Max)의 3배를 넘지 않는다.
7. 조건을 만족하는 반배정이 불가능 할 경우, -1 을 출력한다.

예를 들어, 신입 사원 5명의 점수가 각각 3, 5, 5, 4, 5 이고, 각 반의 최소 인원(K Min)이 1, 각 반의 최대 인원(K Max)이 4 로 주어진 경우 T1 = 4, T2 = 5 인 경우에만 반 편성이 가능하다.
이때, 가장 많은 수의 사람으로 구성된 A 반의 인원 3명과 가장 적은 수의 사람으로 구성된 B, C 반의 인원 1명의 차이값, 2를 정답으로 출력한다.
입력으로 신입 사원 6명의 점수가 5 3 3 5 5 1 주어지고, 각 반의 최소 인원(K Min)이 2명, 각 반의 최대 인원(K Max)이 6명으로 주어진 경우, 이 조건에 맞는 반 편성을 할 수 없다.
T1 = 3, T2 = 5 로 기준 점수를 설정 할 경우, C 반의 인원 수가 각 반의 최소 인원(K Min)이 2명 보다 작으므로 반편성이 불가능 하다. 조건에 맞는 반편성이 불가능 할 경우에는 -1 을 출력한다.

첫 줄에 총 테스트 케이스의 개수 T가 주어진다.
두 번째 줄부터 T개의 테스트 케이스가 차례대로 주어진다.
각 테스트 케이스의 첫 번째 줄에는 신입 사원의 수(N), 각 반의 최소 인원(K Min), 각 반의 최대 인원(K Max)이 차례대로 주어진다.
이후 N 명의 신입 사원들의 어학점수가 주어진다.


가장 많은 인원으로 구성된 분반과 가장 적은 인원으로 구성된 분반의 인원 수 차이의 최소값을 정답으로 출력한다.
조건을 만족하는 반배정이 불가능 할 경우, -1 을 출력하라.
입력 예시
'''
import sys

sys.stdin = open("C5_input.txt")

T = int(input())

for case in range(1, T+1):
    N, K_min, K_max = map(int, input().split())
    score = list(map(int, input().split()))

    score.sort()

    class_score = []
    people_num = []
    top = -1

    for c in score:
        if c not in class_score:
            class_score.append(c)
            people_num.append(1)
            top += 1

        else:
            people_num[top] += 1

    flag = 0
    if len(people_num) == 3:
        for c in people_num:
            if c < K_min or c > K_max:
                flag = 1
                break
        if flag != 1:
            result = max(people_num) - min(people_num)
            print(result)




    elif len(people_num) > 3:
        result = 99
        for i in range(1, len(people_num)-1):
            for j in range(i+1, len(people_num)):
                A = sum(people_num[:i])
                B = sum(people_num[i:j])
                C = sum(people_num[j:])

                mem = [A, B, C]
                minor = max(mem) - min(mem)
                if minor < result:
                    result = minor
        if result == 99:
            flag = 1
        else:
            print(result)

    else:
        flag = 1





    if flag == 1:
        print('-1')